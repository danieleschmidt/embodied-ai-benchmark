# Embodied AI Benchmark++ Docker Compose Configuration
# For development and local deployment

version: '3.8'

services:
  # Main benchmark application
  benchmark-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: embodied-ai-benchmark
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - BENCHMARK_ENV=development
      - BENCHMARK_LOG_LEVEL=DEBUG
      - BENCHMARK_API_HOST=0.0.0.0
      - BENCHMARK_API_PORT=8080
      - BENCHMARK_WORKERS=4
      - BENCHMARK_CACHE_SIZE=1000
      - BENCHMARK_MAX_MEMORY_MB=2048
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    networks:
      - benchmark-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: benchmark-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - benchmark-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: benchmark-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=benchmark
      - POSTGRES_USER=benchmark_user
      - POSTGRES_PASSWORD=benchmark_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - benchmark-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U benchmark_user -d benchmark"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: benchmark-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - benchmark-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: benchmark-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - benchmark-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: benchmark-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    networks:
      - benchmark-network
    depends_on:
      - benchmark-app

networks:
  benchmark-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local